/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.pivotal.metrics;

import static java.util.Arrays.asList;
import static java.util.stream.Collectors.toList;

import java.util.List;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.Stream;

import org.apache.geode.cache.Region;
import org.apache.geode.cache.client.ClientCache;
import org.apache.geode.cache.client.ClientCacheFactory;
import org.apache.geode.cache.client.ClientRegionShortcut;

public class DoOps {
  private static final Random RANDOM = new Random();
  private static final String REPLICATE_REGION_NAME = "my-replicate-region";
  private static final String PARTITIONED_REGION_NAME = "my-partitioned-region";
  private static final int MAX_SLEEP_MILLIS = 1000;
  private static final int MAX_KEY = 100_000;
  private static int puts;
  private static int gets;

  public static void main(String[] args) throws InterruptedException {
    List<Consumer<Region<Integer,Integer>>> operations = operations();

    try (ClientCache cache = cache()) {
      List<Region<Integer, Integer>> regions = regions(cache);
      int batch = 0;

      while (true) {
        for (int i = 0; i < 1000; i++) {
          randomChoiceOf(operations)
              .accept(randomChoiceOf(regions));
        }
        System.out.format("Finished batch %d (puts %d, gets %d)%n", ++batch, puts, gets);
        Thread.sleep(RANDOM.nextInt(MAX_SLEEP_MILLIS));
      }
    }
  }

  private static ClientCache cache() {
    return new ClientCacheFactory()
        .addPoolLocator("127.0.0.1", 10334)
        .set("log-level", "WARN").create();
  }

  private static void get(Region<Integer, Integer> region) {
    region.get(RANDOM.nextInt(MAX_KEY * 2));
    gets++;
  }

  private static void put(Region<Integer, Integer> region) {
    region.put(RANDOM.nextInt(MAX_KEY), RANDOM.nextInt());
    puts++;
  }

  private static List<Consumer<Region<Integer, Integer>>> operations() {
    return asList(DoOps::get, DoOps::put);
  }

  private static <T> T randomChoiceOf(List<T> items) {
    return items.get(RANDOM.nextInt(items.size()));
  }

  private static Region<Integer, Integer> region(ClientCache cache, String regionName) {
    return cache.<Integer, Integer>createClientRegionFactory(ClientRegionShortcut.PROXY)
        .create(regionName);
  }

  private static List<Region<Integer, Integer>> regions(ClientCache cache) {
    return Stream.of(REPLICATE_REGION_NAME, PARTITIONED_REGION_NAME)
        .map(name -> region(cache, name))
        .collect(toList());
  }
}
